id_vars <- id_vars[!id_vars %in% c('metric_nm', 'group_map_json_obj')]
formula_str <- paste(paste(id_vars, collapse = " + "), "~ metric_range_end_dt")
ref_txn_data_wide <- dcast(ref_txn_data, as.formula(formula_str), value.var = "metric_actl_num")
ref_txn_data_wide
txn_data[metric_id == 1067]
#-------------------------------------------------------------------------------
# Set path to working directory
#-------------------------------------------------------------------------------
LOCAL = TRUE
PRINT = TRUE
if (LOCAL) {
BASE_DIR <<- '/Users/zco7139/Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA/'
} else {
BASE_DIR <<- './'
}
#-------------------------------------------------------------------------------
# Load packages
#-------------------------------------------------------------------------------
library(shiny)
library(shinyWidgets)
library(ggplot2)
library(dplyr)
library(data.table)
library(viridis)
library(DT)
#-------------------------------------------------------------------------------
# Source functions
#-------------------------------------------------------------------------------
source(paste0(BASE_DIR, "utils.R"))
source(paste0(BASE_DIR, "ui.R"))
source(paste0(BASE_DIR, "server.R"))
source(paste0(BASE_DIR, "ggplot_theme.R"))
DEBUG = FALSE
source(paste0(BASE_DIR, "debug.R"))
#-------------------------------------------------------------------------------
# Run the app
#-------------------------------------------------------------------------------
shinyApp(ui = ui, server = server)
#-------------------------------------------------------------------------------
# Set path to working directory
#-------------------------------------------------------------------------------
LOCAL = TRUE
PRINT = TRUE
if (LOCAL) {
BASE_DIR <<- '/Users/zco7139/Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA/'
} else {
BASE_DIR <<- './'
}
#-------------------------------------------------------------------------------
# Load packages
#-------------------------------------------------------------------------------
library(shiny)
library(shinyWidgets)
library(ggplot2)
library(dplyr)
library(data.table)
library(viridis)
library(DT)
#-------------------------------------------------------------------------------
# Source functions
#-------------------------------------------------------------------------------
source(paste0(BASE_DIR, "utils.R"))
source(paste0(BASE_DIR, "ui.R"))
source(paste0(BASE_DIR, "server.R"))
source(paste0(BASE_DIR, "ggplot_theme.R"))
DEBUG = FALSE
source(paste0(BASE_DIR, "debug.R"))
#-------------------------------------------------------------------------------
# Run the app
#-------------------------------------------------------------------------------
shinyApp(ui = ui, server = server)
#-------------------------------------------------------------------------------
# Set path to working directory
#-------------------------------------------------------------------------------
LOCAL = TRUE
PRINT = TRUE
if (LOCAL) {
BASE_DIR <<- '/Users/zco7139/Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA/'
} else {
BASE_DIR <<- './'
}
#-------------------------------------------------------------------------------
# Load packages
#-------------------------------------------------------------------------------
library(shiny)
library(shinyWidgets)
library(ggplot2)
library(dplyr)
library(data.table)
library(viridis)
library(DT)
#-------------------------------------------------------------------------------
# Source functions
#-------------------------------------------------------------------------------
source(paste0(BASE_DIR, "utils.R"))
source(paste0(BASE_DIR, "ui.R"))
source(paste0(BASE_DIR, "server.R"))
source(paste0(BASE_DIR, "ggplot_theme.R"))
DEBUG = FALSE
source(paste0(BASE_DIR, "debug.R"))
#-------------------------------------------------------------------------------
# Run the app
#-------------------------------------------------------------------------------
shinyApp(ui = ui, server = server)
#-------------------------------------------------------------------------------
# Set path to working directory
#-------------------------------------------------------------------------------
LOCAL = TRUE
PRINT = TRUE
if (LOCAL) {
BASE_DIR <<- '/Users/zco7139/Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA/'
} else {
BASE_DIR <<- './'
}
#-------------------------------------------------------------------------------
# Load packages
#-------------------------------------------------------------------------------
library(shiny)
library(shinyWidgets)
library(ggplot2)
library(dplyr)
library(data.table)
library(viridis)
library(DT)
#-------------------------------------------------------------------------------
# Source functions
#-------------------------------------------------------------------------------
source(paste0(BASE_DIR, "utils.R"))
source(paste0(BASE_DIR, "ui.R"))
source(paste0(BASE_DIR, "server.R"))
source(paste0(BASE_DIR, "ggplot_theme.R"))
DEBUG = FALSE
source(paste0(BASE_DIR, "debug.R"))
#-------------------------------------------------------------------------------
# Run the app
#-------------------------------------------------------------------------------
shinyApp(ui = ui, server = server)
rsconnect::forgetDeployment()
rm(list = ls())
library(readr)
#-------------------------------------------------------------------------------
# Set path to working directory
#-------------------------------------------------------------------------------
LOCAL = TRUE
if (LOCAL) {
BASE_DIR <<- '/Users/zco7139/Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA/'
setwd(BASE_DIR)
}
#-------------------------------------------------------------------------------
# Load packages
#-------------------------------------------------------------------------------
library(shiny)
library(shinyWidgets)
library(ggplot2)
library(dplyr)
library(data.table)
library(viridis)
library(DT)
#-------------------------------------------------------------------------------
# Source functions
#-------------------------------------------------------------------------------
source("utils.R")
source("ui.R")
source("server.R")
source("ggplot_theme.R")
runApp()
#-------------------------------------------------------------------------------
# Set path to working directory
#-------------------------------------------------------------------------------
LOCAL = TRUE
if (LOCAL) {
BASE_DIR <<- '/Users/zco7139/Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA/'
setwd(BASE_DIR)
}
#-------------------------------------------------------------------------------
# Load packages
#-------------------------------------------------------------------------------
library(shiny)
library(shinyWidgets)
library(ggplot2)
library(dplyr)
library(data.table)
library(viridis)
library(DT)
#library(readr)
#-------------------------------------------------------------------------------
# Source functions
#-------------------------------------------------------------------------------
source("ui.R")
source("server.R")
#-------------------------------------------------------------------------------
# Run the app
#-------------------------------------------------------------------------------
shinyApp(ui = ui, server = server)
getwd()
list.files()
#data = fread('ref_metric.csv')
#data = read_csv('ref_metric.csv')
data = read.csv('ref_metric.csv', stringsAsFactors = FALSE)
data
#data = fread('ref_metric.csv')
#data = read_csv('ref_metric.csv')
data = as.data.table(read.csv('ref_metric.csv', stringsAsFactors = FALSE))
#-------------------------------------------------------------------------------
# Set path to working directory
#-------------------------------------------------------------------------------
LOCAL = TRUE
if (LOCAL) {
BASE_DIR <<- '/Users/zco7139/Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA/'
setwd(BASE_DIR)
}
#-------------------------------------------------------------------------------
# Load packages
#-------------------------------------------------------------------------------
library(shiny)
library(shinyWidgets)
library(ggplot2)
library(dplyr)
library(data.table)
library(viridis)
library(DT)
#library(readr)
#-------------------------------------------------------------------------------
# Source functions
#-------------------------------------------------------------------------------
source("ui.R")
source("server.R")
#-------------------------------------------------------------------------------
# Run the app
#-------------------------------------------------------------------------------
shinyApp(ui = ui, server = server)
runApp()
runApp()
#-------------------------------------------------------------------------------
# Set path to working directory
#-------------------------------------------------------------------------------
LOCAL = TRUE
if (LOCAL) {
BASE_DIR <<- '/Users/zco7139/Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA/'
setwd(BASE_DIR)
}
#-------------------------------------------------------------------------------
# Load packages
#-------------------------------------------------------------------------------
library(shiny)
library(shinyWidgets)
library(ggplot2)
library(dplyr)
library(data.table)
library(viridis)
library(DT)
#-------------------------------------------------------------------------------
# Source functions
#-------------------------------------------------------------------------------
source("ui.R")
source("server.R")
#-------------------------------------------------------------------------------
# Run the app
#-------------------------------------------------------------------------------
shinyApp(ui = ui, server = server)
#-------------------------------------------------------------------------------
# Set path to working directory
#-------------------------------------------------------------------------------
LOCAL = TRUE
if (LOCAL) {
BASE_DIR <<- '/Users/zco7139/Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA/'
setwd(BASE_DIR)
}
#-------------------------------------------------------------------------------
# Load packages
#-------------------------------------------------------------------------------
library(shiny)
library(shinyWidgets)
library(ggplot2)
library(dplyr)
library(data.table)
library(viridis)
library(DT)
#-------------------------------------------------------------------------------
# Source functions
#-------------------------------------------------------------------------------
source("ui.R")
source("server.R")
#-------------------------------------------------------------------------------
# Run the app
#-------------------------------------------------------------------------------
shinyApp(ui = ui, server = server)
#-------------------------------------------------------------------------------
# Set path to working directory
#-------------------------------------------------------------------------------
LOCAL = TRUE
if (LOCAL) {
BASE_DIR <<- '/Users/zco7139/Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA/'
setwd(BASE_DIR)
}
#-------------------------------------------------------------------------------
# Load packages
#-------------------------------------------------------------------------------
library(shiny)
library(shinyWidgets)
library(ggplot2)
library(dplyr)
library(data.table)
library(viridis)
library(DT)
#-------------------------------------------------------------------------------
# Source functions
#-------------------------------------------------------------------------------
source("ui.R")
source("server.R")
#-------------------------------------------------------------------------------
# Run the app
#-------------------------------------------------------------------------------
shinyApp(ui = ui, server = server)
#-------------------------------------------------------------------------------
# Set path to working directory
#-------------------------------------------------------------------------------
LOCAL = TRUE
if (LOCAL) {
BASE_DIR <<- '/Users/zco7139/Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA/'
setwd(BASE_DIR)
}
#-------------------------------------------------------------------------------
# Load packages
#-------------------------------------------------------------------------------
library(shiny)
library(shinyWidgets)
library(ggplot2)
library(dplyr)
library(data.table)
library(viridis)
library(DT)
#-------------------------------------------------------------------------------
# Source functions
#-------------------------------------------------------------------------------
source("ui.R")
#-------------------------------------------------------------------------------
# Set path to working directory
#-------------------------------------------------------------------------------
LOCAL = TRUE
if (LOCAL) {
BASE_DIR <<- '/Users/zco7139/Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA/'
setwd(BASE_DIR)
}
#-------------------------------------------------------------------------------
# Load packages
#-------------------------------------------------------------------------------
library(shiny)
library(shinyWidgets)
library(ggplot2)
library(dplyr)
library(data.table)
library(viridis)
library(DT)
library(plotly)
#-------------------------------------------------------------------------------
# Source functions
#-------------------------------------------------------------------------------
source("ui.R")
source("server.R")
#-------------------------------------------------------------------------------
# Run the app
#-------------------------------------------------------------------------------
shinyApp(ui = ui, server = server)
#-------------------------------------------------------------------------------
# Set path to working directory
#-------------------------------------------------------------------------------
LOCAL = TRUE
if (LOCAL) {
BASE_DIR <<- '/Users/zco7139/Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA/'
setwd(BASE_DIR)
}
#-------------------------------------------------------------------------------
# Load packages
#-------------------------------------------------------------------------------
library(shiny)
library(shinyWidgets)
library(ggplot2)
library(dplyr)
library(data.table)
library(viridis)
library(DT)
library(plotly)
#-------------------------------------------------------------------------------
# Source functions
#-------------------------------------------------------------------------------
source("ui.R")
source("server.R")
#-------------------------------------------------------------------------------
# Run the app
#-------------------------------------------------------------------------------
shinyApp(ui = ui, server = server)
#-------------------------------------------------------------------------------
# Set path to working directory
#-------------------------------------------------------------------------------
LOCAL = TRUE
if (LOCAL) {
BASE_DIR <<- '/Users/zco7139/Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA/'
setwd(BASE_DIR)
}
#-------------------------------------------------------------------------------
# Load packages
#-------------------------------------------------------------------------------
library(shiny)
library(shinyWidgets)
library(ggplot2)
library(dplyr)
library(data.table)
library(viridis)
library(DT)
library(plotly)
#-------------------------------------------------------------------------------
# Source functions
#-------------------------------------------------------------------------------
source("ui.R")
source("server.R")
#-------------------------------------------------------------------------------
# Run the app
#-------------------------------------------------------------------------------
shinyApp(ui = ui, server = server)
#-------------------------------------------------------------------------------
# Set path to working directory
#-------------------------------------------------------------------------------
LOCAL = TRUE
if (LOCAL) {
BASE_DIR <<- '/Users/zco7139/Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA/'
setwd(BASE_DIR)
}
#-------------------------------------------------------------------------------
# Load packages
#-------------------------------------------------------------------------------
library(shiny)
library(shinyWidgets)
library(ggplot2)
library(dplyr)
library(data.table)
library(viridis)
library(DT)
library(plotly)
#-------------------------------------------------------------------------------
# Source functions
#-------------------------------------------------------------------------------
source("ui.R")
source("server.R")
#-------------------------------------------------------------------------------
# Run the app
#-------------------------------------------------------------------------------
shinyApp(ui = ui, server = server)
## Functions
load_ref_data = function() {
data = fread(paste0(BASE_DIR, 'ref_metric.csv'))
# TBD: Implement selection of additional metrics later
return(data)
}
## Functions
load_ref_data = function() {
data = fread(paste0(BASE_DIR, 'ref_metric.csv'))
# TBD: Implement selection of additional metrics later
return(data)
}
ref_data_long = function(data) {
key_cols = setdiff(names(data), c("metric_id", "metric_nm", 'group_map_json_obj'))
data_long = suppressWarnings(melt(data, id.vars = "metric_id",
measure.vars = key_cols,
variable.name = "column",
value.name = "value"))
data_long[,group := paste0(column, ":", value)]
return(data_long)
}
load_txn_data = function(){
data = fread(paste0(BASE_DIR, 'txn_metric.csv'))
data
}
key_values <- function(input, data) {
result = get_key_values(ref_data %>% filter(metric_id %in% filter_metric_ids(input, data)))
return(result)
}
filter_metric_ids = function(input, data){
# If no filter is selected, return all metric_ids from ref_data_long
if (is.null(input$filter) || length(input$filter) == 0) {
return(unique(data$metric_id))
}
selectedFilterGroups <- c()
for (key in input$filter) {
# Dynamically reference `selectedFilterValues_<key>`
selectedFilterValues <- input[[paste0("selectedFilterValues_", key)]]
if (!is.null(selectedFilterValues)) {
selectedFilterGroups <- c(selectedFilterGroups, paste(key, selectedFilterValues, sep = ":"))
}
}
# If any filter values have been selected, filter the data;
# otherwise, use the entire ref_data_long
filteredRefData <- if (length(selectedFilterGroups) > 0) {
data %>% filter(group %in% selectedFilterGroups)
} else {
data
}
metric_ids <- filteredRefData[, unique(metric_id)]
return(metric_ids)
}
# Dashboard opens
input = list()
ref_data = load_ref_data()
ref_data_long_obj = ref_data_long(ref_data)
txn_data = load_txn_data()
input$filter = c()
input
ref_data
unique(ref_data)
unique(ref_data)
ref_data[metric_id %in% c(1, 1033)]
ref_data[metric_id %in% c(2, 1033)]
