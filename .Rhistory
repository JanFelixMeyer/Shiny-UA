}
for (ele in input$color_by) {
for (val in key_values[ele]) {
input[[paste0("selectedColorByValues_", ele)]] <- val
}
}
input
input = list()
input$filter_by <- c("location_description")
input$color_by <- c()
by <- c()
for (ele in input$filter_by
)
input = list()
input$filter_by <- c("location_description")
input$color_by <- c()
for (ele in input$filter_by) {
input[[paste0("selectedFilterValues_", ele)]] <- key_values[ele][1]
if (FALSE) {
for (val in key_values[ele]) {
input[[paste0("selectedFilterValues_", ele)]] <- val
}
}
}
input
key_values[ele][1]
key_values[[ele]][1]
input = list()
input$filter_by <- c("location_description")
input$color_by <- c()
for (ele in input$filter_by) {
input[[paste0("selectedFilterValues_", ele)]] <- key_values[[ele]][1]
if (FALSE) {
for (val in key_values[ele]) {
input[[paste0("selectedFilterValues_", ele)]] <- val
}
}
}
for (ele in input$color_by) {
for (val in key_values[ele]) {
input[[paste0("selectedColorByValues_", ele)]] <- val
}
}
input
ref_data_long
input$filter
input
ref_data
# Create an empty vector to store the selected key-value combinations
selectedFilterGroups <- c()
for (key in filter_by) {
selectedFilterValues <- input[[paste0("selectedFilterValues_", key)]]
if (!is.null(selectedFilterValues)) {
# Create key-value combinations
selectedFilterGroups <- c(selectedFilterGroups, paste(key, selectedFilterValues, sep = ":"))
}
}
color_by <- input$color_by
filter_by <- input$filter
if (DEBUG) {
print(paste0(rep('-', 30), collapse = '-'))
print(paste0('color_by = ', paste0(color_by, collapse = ', ')))
print(paste0('filter_by = ', paste0(filter_by, collapse = ', ')))
}
# If no keys are selected, consider all keys selected by default
if (length(filter_by) == 0) {
filter_by <- names(key_values())  # Default to all keys
}
filter_by
# Create an empty vector to store the selected key-value combinations
selectedFilterGroups <- c()
for (key in filter_by) {
selectedFilterValues <- input[[paste0("selectedFilterValues_", key)]]
if (!is.null(selectedFilterValues)) {
# Create key-value combinations
selectedFilterGroups <- c(selectedFilterGroups, paste(key, selectedFilterValues, sep = ":"))
}
}
selectedFilterGroups
input
## Functions
filter_metric_ids <- function(input, data){
selectedFilterGroups <- c()
for (key in input$filter_by) {
selectedFilterValues <- input[[paste0("selectedFilterValues_", key)]]
if (!is.null(selectedFilterValues)) {
# Create key-value combinations
selectedFilterGroups <- c(selectedFilterGroups, paste(key, selectedFilterValues, sep = ":"))
}
}
# Apply Filter
filteredRefData = data %>% filter(group %in% selectedFilterGroups)
metric_ids = filteredRefData[,unique(metric_id)]
return(metric_ids)
}
## Functions
ref_data_long <- function(data) {
key_cols = setdiff(names(data), c("metric_id", "metric_nm", 'group_map_json_obj'))
data_long = suppressWarnings(melt(data, id.vars = "metric_id",
measure.vars = key_cols,
variable.name = "column",
value.name = "value"))
data_long[,group := paste0(column, ":", value)]
return(data_long)
}
filter_metric_ids <- function(input, data){
selectedFilterGroups <- c()
for (key in input$filter_by) {
selectedFilterValues <- input[[paste0("selectedFilterValues_", key)]]
if (!is.null(selectedFilterValues)) {
# Create key-value combinations
selectedFilterGroups <- c(selectedFilterGroups, paste(key, selectedFilterValues, sep = ":"))
}
}
# Apply Filter
filteredRefData = data %>% filter(group %in% selectedFilterGroups)
metric_ids = filteredRefData[,unique(metric_id)]
return(metric_ids)
}
ref_data_long
ref_data_long(ref_data)
ref_data_long(ref_data)
ref_data_long <- function(data) {
key_cols = setdiff(names(data), c("metric_id", "metric_nm", 'group_map_json_obj'))
data_long = suppressWarnings(melt(data, id.vars = "metric_id",
measure.vars = key_cols,
variable.name = "column",
value.name = "value"))
data_long[,group := paste0(column, ":", value)]
return(data_long)
}
test = ref_data_long(ref_data)
test
test
test = ref_data_long(ref_data)
filter_metric_ids = function(input, data){
selectedFilterGroups <- c()
for (key in input$filter_by) {
selectedFilterValues <- input[[paste0("selectedFilterValues_", key)]]
if (!is.null(selectedFilterValues)) {
# Create key-value combinations
selectedFilterGroups <- c(selectedFilterGroups, paste(key, selectedFilterValues, sep = ":"))
}
}
# Apply Filter
filteredRefData = data %>% filter(group %in% selectedFilterGroups)
metric_ids = filteredRefData[,unique(metric_id)]
return(metric_ids)
}
test2 = filter_metric_ids(input, test)
test2
metric_ids = filter_metric_ids(input, test)
get_key_values
runApp('Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA/moda_data_dashboard.R')
#-------------------------------------------------------------------------------
# Set path to working directory
#-------------------------------------------------------------------------------
LOCAL = TRUE
if (LOCAL) {
BASE_DIR <<- '/Users/zco7139/Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA/'
} else {
BASE_DIR <<- './'
}
#-------------------------------------------------------------------------------
# Load packages
#-------------------------------------------------------------------------------
library(shiny)
library(ggplot2)
library(dplyr)
library(data.table)
#-------------------------------------------------------------------------------
# Source functions
#-------------------------------------------------------------------------------
source(paste0(BASE_DIR, "utils.R"))
source(paste0(BASE_DIR, "ui.R"))
source(paste0(BASE_DIR, "server.R"))
runApp('Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA')
runApp('Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA')
my_theme
#-------------------------------------------------------------------------------
# Set path to working directory
#-------------------------------------------------------------------------------
LOCAL = TRUE
#-------------------------------------------------------------------------------
# Set path to working directory
#-------------------------------------------------------------------------------
LOCAL = TRUE
if (LOCAL) {
BASE_DIR <<- '/Users/zco7139/Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA/'
} else {
BASE_DIR <<- './'
}
#-------------------------------------------------------------------------------
# Load packages
#-------------------------------------------------------------------------------
library(shiny)
library(ggplot2)
library(dplyr)
library(data.table)
#-------------------------------------------------------------------------------
# Source functions
#-------------------------------------------------------------------------------
source(paste0(BASE_DIR, "utils.R"))
source(paste0(BASE_DIR, "ui.R"))
source(paste0(BASE_DIR, "server.R"))
source(paste0(BASE_DIR, "ggplot_theme.R"))
DEBUG = FALSE
source(paste0(BASE_DIR, "debug.R"))
#-------------------------------------------------------------------------------
# Run the app
#-------------------------------------------------------------------------------
shinyApp(ui = ui, server = server)
#-------------------------------------------------------------------------------
# Set path to working directory
#-------------------------------------------------------------------------------
LOCAL = TRUE
if (LOCAL) {
BASE_DIR <<- '/Users/zco7139/Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA/'
} else {
BASE_DIR <<- './'
}
#-------------------------------------------------------------------------------
# Load packages
#-------------------------------------------------------------------------------
library(shiny)
library(ggplot2)
library(dplyr)
library(data.table)
#-------------------------------------------------------------------------------
# Source functions
#-------------------------------------------------------------------------------
source(paste0(BASE_DIR, "utils.R"))
source(paste0(BASE_DIR, "ui.R"))
source(paste0(BASE_DIR, "server.R"))
source(paste0(BASE_DIR, "ggplot_theme.R"))
DEBUG = FALSE
source(paste0(BASE_DIR, "debug.R"))
#-------------------------------------------------------------------------------
# Run the app
#-------------------------------------------------------------------------------
shinyApp(ui = ui, server = server)
runApp('Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA')
runApp('Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA')
DEBUG = TRUE
source(paste0(BASE_DIR, "debug.R"))
## Functions
load_ref_data = function() {
data = fread(paste0(BASE_DIR, 'ref_metric.csv'))
# TBD: Implement selection of additional metrics later
data = data[metric_nm == '% CRR']
return(data)
}
ref_data_long = function(data) {
key_cols = setdiff(names(data), c("metric_id", "metric_nm", 'group_map_json_obj'))
data_long = suppressWarnings(melt(data, id.vars = "metric_id",
measure.vars = key_cols,
variable.name = "column",
value.name = "value"))
data_long[,group := paste0(column, ":", value)]
return(data_long)
}
key_values <- function(input, data) {
result = get_key_values(ref_data() %>% filter(metric_id %in% filter_metric_ids()))
return(result)
}
filter_metric_ids = function(input, data){
selectedFilterGroups <- c()
for (key in input$filter_by) {
selectedFilterValues <- input[[paste0("selectedFilterValues_", key)]]
if (!is.null(selectedFilterValues)) {
# Create key-value combinations
selectedFilterGroups <- c(selectedFilterGroups, paste(key, selectedFilterValues, sep = ":"))
}
}
# Apply Filter
filteredRefData = data %>% filter(group %in% selectedFilterGroups)
metric_ids = filteredRefData[,unique(metric_id)]
return(metric_ids)
}
# Dashboard opens
ref_data = load_ref_data()
ref_data
input$filter = names(key_values(ref_data))
input = list()
# Dashboard opens
input = list()
ref_data = load_ref_data()
input$filter = names(key_values(ref_data))
input$filter = names(key_values(input,ref_data))
key_values <- function(input, data) {
result = get_key_values(ref_data %>% filter(metric_id %in% filter_metric_ids(input, data)))
return(result)
}
filter_metric_ids = function(input, data){
selectedFilterGroups <- c()
for (key in input$filter_by) {
selectedFilterValues <- input[[paste0("selectedFilterValues_", key)]]
if (!is.null(selectedFilterValues)) {
# Create key-value combinations
selectedFilterGroups <- c(selectedFilterGroups, paste(key, selectedFilterValues, sep = ":"))
}
}
# Apply Filter
filteredRefData = data %>% filter(group %in% selectedFilterGroups)
metric_ids = filteredRefData[,unique(metric_id)]
return(metric_ids)
}
# Dashboard opens
input = list()
ref_data = load_ref_data()
input$filter = names(key_values(input, ref_data))
filter_metric_ids(input, ref_data)
# Dashboard opens
input = list()
ref_data = load_ref_data()
ref_data_long_obj = ref_data_long(ref_data)
filter_metric_ids = function(input, data){
selectedFilterGroups <- c()
for (key in input$filter_by) {
selectedFilterValues <- input[[paste0("selectedFilterValues_", key)]]
if (!is.null(selectedFilterValues)) {
# Create key-value combinations
selectedFilterGroups <- c(selectedFilterGroups, paste(key, selectedFilterValues, sep = ":"))
}
}
# Apply Filter
filteredRefData = data %>% filter(group %in% selectedFilterGroups)
metric_ids = filteredRefData[,unique(metric_id)]
return(metric_ids)
}
# Dashboard opens
input = list()
ref_data = load_ref_data()
ref_data_long_obj = ref_data_long(ref_data)
# Dashboard opens
input = list()
ref_data = load_ref_data()
ref_data_long_obj = ref_data_long(ref_data)
filter_metric_ids(input, ref_data_long_obj)
data = ref_data_long_obj
filter_metric_ids = function(input, data){
# When no filter-key is selected all possible metric_ids are relevant
if (length(input$filter_by) > 0) {
selectedFilterGroups <- c()
for (key in input$filter_by) {
selectedFilterValues <- input[[paste0("selectedFilterValues_", key)]]
if (!is.null(selectedFilterValues)) {
# Create key-value combinations
selectedFilterGroups <- c(selectedFilterGroups, paste(key, selectedFilterValues, sep = ":"))
}
}
# Apply Filter
filteredRefData = data %>% filter(group %in% selectedFilterGroups)
metric_ids = filteredRefData[,unique(metric_id)]
} else {
metric_ids = data[,unique(metric_id)]
}
return(metric_ids)
}
filter_metric_ids = function(input, data){
# When no filter-key is selected all possible metric_ids are relevant
if (length(input$filter_by) > 0) {
selectedFilterGroups <- c()
for (key in input$filter_by) {
selectedFilterValues <- input[[paste0("selectedFilterValues_", key)]]
if (!is.null(selectedFilterValues)) {
# Create key-value combinations
selectedFilterGroups <- c(selectedFilterGroups, paste(key, selectedFilterValues, sep = ":"))
}
}
filteredRefData = data %>% filter(group %in% selectedFilterGroups)
metric_ids = filteredRefData[,unique(metric_id)]
} else {
metric_ids = data[,unique(metric_id)]
}
return(metric_ids)
}
filter_metric_ids(input, ref_data_long_obj)
input$filter = names(key_values(input, ref_data_long_obj))
input$filter
input$filter
names(key_values(input, ref_data_long_obj))
# Dashboard opens
input = list()
ref_data = load_ref_data()
ref_data_long_obj = ref_data_long(ref_data)
input$filter = ()
# A user clicks on a key = location_description -> show the feasible values for the selected
input$filter = "location_description"
# Dashboard opens
input = list()
ref_data = load_ref_data()
ref_data_long_obj = ref_data_long(ref_data)
input$filter = c()
# A user clicks on a key = location_description -> show the feasible values for the selected
input$filter = "location_description"
key = nput$filter[1]
key = input$filter[1]
filter_metric_ids(input, ref_data_long_obj)
filter_metric_ids = function(input, data){
# When no filter-key is selected all possible metric_ids are relevant
if (length(input$filter) > 0) {
selectedFilterGroups <- c()
for (key in input$filter) {
selectedFilterValues <- input[[paste0("selectedFilterValues_", key)]]
if (!is.null(selectedFilterValues)) {
# Create key-value combinations
selectedFilterGroups <- c(selectedFilterGroups, paste(key, selectedFilterValues, sep = ":"))
}
}
filteredRefData = data %>% filter(group %in% selectedFilterGroups)
metric_ids = filteredRefData[,unique(metric_id)]
} else {
metric_ids = data[,unique(metric_id)]
}
return(metric_ids)
}
feasible_values <- ref_data %>%
filter(metric_id %in% filter_metric_ids(input, ref_data_long_obj)) %>%
pull(key) %>%
unique()
feasible_values
ref_data
feasible_values <- ref_data %>%
filter(metric_id %in% filter_metric_ids(input, ref_data_long_obj))
feasible_values
ref_data
ref_data[1, metric_id]
ref_data[, metric_id]
ref_data %>% filter(metric_id %in% filter_metric_ids(input, ref_data_long_obj))
filter_metric_ids(input, ref_data_long_obj)
input
(length(input$filter) > 0)
selectedFilterGroups <- c()
for (key in input$filter) {
selectedFilterValues <- input[[paste0("selectedFilterValues_", key)]]
if (!is.null(selectedFilterValues)) {
# Create key-value combinations
selectedFilterGroups <- c(selectedFilterGroups, paste(key, selectedFilterValues, sep = ":"))
}
}
selectedFilterGroups
input$filter
data
selectedFilterGroups
filter_metric_ids = function(input, data){
# When no filter-key is selected all possible metric_ids are relevant
if (length(input$filter) > 0) {
selectedFilterGroups <- c()
for (key in input$filter) {
selectedFilterValues <- input[[paste0("selectedFilterValues_", key)]]
if (!is.null(selectedFilterValues)) {
# Create key-value combinations
selectedFilterGroups <- c(selectedFilterGroups, paste(key, selectedFilterValues, sep = ":"))
}
}
if (length(selectedFilterGroups) > 0) {
filteredRefData = data %>% filter(group %in% selectedFilterGroups)
} else {
filteredRefData = data
}
metric_ids = filteredRefData[,unique(metric_id)]
} else {
metric_ids = data[,unique(metric_id)]
}
return(metric_ids)
}
filter_metric_ids(input, ref_data_long_obj)
feasible_values <- ref_data %>% filter(metric_id %in% filter_metric_ids(input, ref_data_long_obj))
feasible_values
feasible_values <- ref_data() %>%
filter(metric_id %in% filter_metric_ids()) %>%
pull(key) %>%
unique()
feasible_values <- ref_data %>%
filter(metric_id %in% filter_metric_ids(input, ref_data_long_obj)) %>%
pull(key) %>%
unique()
feasible_values
key = input$filter[1]
# A user clicks on a key = location_description -> show the feasible values for the selected
input$filter = "location_description"
feasible_values <- ref_data %>%
filter(metric_id %in% filter_metric_ids(input, ref_data_long_obj)) %>%
pull(key) %>%
unique()
key = input$filter[1]
input[[paste0("selectedFilterValues_", key)]] = feasible_values[1]
input
feasible_values[1]
# The user selects another key = Area -> show the feasible values (given that location_description = Lager-Steriltest was selected before)
input$filter = c("location_description", "Area")
Area
filter_metric_ids(input, ref_data_long_obj)
feasible_values <- ref_data %>%
filter(metric_id %in% filter_metric_ids(input, ref_data_long_obj)) %>%
pull(key) %>%
unique()
feasible_values
# The user selects another key = Area -> show the feasible values (given that location_description = Lager-Steriltest was selected before)
input$filter = c("location_description", "Area")
key = input$filter[2]
feasible_values <- ref_data %>%
filter(metric_id %in% filter_metric_ids(input, ref_data_long_obj)) %>%
pull(key) %>%
unique()
feasible_values
input[[paste0("selectedFilterValues_", key)]] = feasible_values[1]
input
input
runApp('Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA')
runApp('Library/CloudStorage/OneDrive-Takeda/Documents/GitHub/Shiny-UA')
